## identifies server in docker containers
server_ask() {
    echo -n "Choose your server: "
    read SERVER
    SERVER="${SERVER:=chaudhuri-roche}"
}


* Setup
#+name: setup
#+begin_src bash :tangle no
project=basecamp
repo=~/repos/"${project}"
mkdir -p "${repo}"/src/shell
#+end_src
* Common Process Functions 
:PROPERTIES:
:CREATED:  [2020-04-14 Tue 09:05]
:END:
#+name: check_local_software
#+begin_src bash :tangle ./src/shell/functions.sh
check_local_software(){
    # Check for parameters, return usage 
    if [[ $# -eq 0 ]] ; then
        printf "\n check_local_software 
              \n Checks list of software in array, exits with error message if not found
              \n \$1 = Bash array of software, e.g. software=(bash, git)
              \n "
    else
        software_to_test=$1
        for i in "${software_to_test[@]}"; do
            if command -v $i >/dev/null 2>&1 ; then
                echo "$i installed"
            else
                echo "$i not found, exiting"
                exit 1
            fi
        done        
    fi
}
#
# check_local_software
# unit test
#software=(bash)
#check_local_software $software
#+end_src

#+name: git_pull_all
#+begin_src bash :tangle ./src/git_pull_all.sh :dir ~/repos/basecamp
#!/bin/bash
#########1#########2#########3#########4#########5#########6#########7#########8
#                                                                              #
#                       Script to automate git pulls                           #
#             from a set of repositories within the same root dir              #
#                                                                              #
#########1#########2#########3#########4#########5#########6#########7#########8
# 
# 1. Script Checks
#
## Check if git exist
command -v git >/dev/null 2>&1 # stop if git not found
if [ $? -eq 1 ]; then
    echo "Git not found"
    exit 1; fi
##
## Check if any repos exist
shopt -s nullglob
repo_dirs=(~/repos/*)
if [ ${#repo_dirs[@]} -eq 0 ]; then
    echo "No repos at ~/repos/"
    exit 1; fi
shopt -u nullglob
##
# 2. Pull Function 
#                      
for d in $HOME/repos/*
do 
    [[ ! -d "$d" ]] && continue
    echo "$d" &&
    cd "$d" &&
    git pull &&
    git submodule update --recursive &&
    cd "$OLDPWD"
done
#
#+end_src

#+name: jpg_to_pdf
#+begin_src bash 
#########1#########2#########3#########4#########5#########6#########7#########8#########9#########0#########1
jpg_to_pdf() {
    printf "Function to convert jpeg images to pdf
    Accepts:
    Returns: "
}
#+end_src

#+name:symlink-by-csv-script 
#+begin_src sh :tangle ./src/shell/functions.sh
#
######################
### symlink-by-csv ###
######################
#
# Purpose: generates symbolic links in bulk from a csv file 
#
# Input:
# A .csv file of two columns, 
#  Column 1 with source file paths
#  Column 2 with destination symbolic link paths 
#
# Function:
symlink_by_csv(){
    # Set internal field separator
    export IFS=","
    # Take csv and pass to while/read
    cat $1 | while read a b; do
        ln -s $a $b; done
}
#
# Example:
# cd /tmp
# mkdir -p csv-symlink-test
# cd csv-symlink-test
# touch csv-for-links.csv
# touch file-to-link-from.txt
# echo "file-to-link-from.txt,path-to-link-to.txt" >> csv-for-links.csv
# echo "test link" > file-to-link-from.txt
# export IFS=","
# cat csv-for-links.csv | while read a b; do
#     ln -s $a $b ; done
# cat path-to-link-to.txt
# cd ../
# rm -rf csv-symlink-test
#+end_src

#+name:copy-file-text-to-clipboard 
#+begin_src sh 
#
###################################
### copy-file-text-to-clipboard ###
###################################
#
# Purpose: for pandoc supported file, copies file text to system clipboard
#
# Dependencies:
dependencies=("pandoc" "xclip")
check_dependencies dependencies[@]
#
# Input: 
# Any pandoc supported file 
#
# Function:
text_to_clip() { pandoc -S $1 | xclip -selection clipboard}
#
# Example
cd /tmp/ && rm -rf ./example && mkdir -p ./example && cd ./example 
echo "Hello" | pandoc -o out.docx
chmod 777 ./out.docx
text_to_clip()
./out.docx
test=out.docx
pandoc -S $test | xclip -selection clipboard

#+end_src


* Local Variables :noexport:
#+property: header-args: results silent
#+property: header-args: cache yes
#+property: header-args: eval never-export
#+property: header-args: exports code
#+property: header-args: session *mpnst*
#+property: header-args: tangle no
#+property: header-args: var: project="mpnst" 
#+startup: overview
# Local Variables:
# truncate-lines: nil
# End:
=======
#+name: build-dockerfile
#+begin_src bash 
#NOTE: Cannot build for local machine while connected to VPN- apt can't install software
cd ~/repos/basecamp
test=~/repos/basecamp

docker build . --file Dockerfile --tag jeszyman/test
#+end_src

#+name: mount-ris-storage
#+begin_src bash 

#+end_src
>>>>>>> fd87b984ab919f4230a3d873ef65c2a1241faaa0
