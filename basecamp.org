http://ess.r-project.org/Manual/ess.html#Activating-and-Loading-ESS
and get docker ip
and provision container for ssh 

https://www.bioconductor.org/packages/release/bioc/vignettes/polyester/inst/doc/polyester.html
## identifies server in docker containers
server_ask() {
    echo -n "Choose your server: "
    read SERVER
    SERVER="${SERVER:=chaudhuri-roche}"
}

#+name: global_setup
#+begin_src bash :tangle no
repo=~/repos/basecamp

#+end_src

#+name: local_setup
#+begin_src bash :tangle no


#+end_src

#+name: docker_build
#+begin_src bash :tangle no
cd $repo
docker build . --file Dockerfile --tag jeszyman/test

docker ps
docker exec -it b95de4b12b87 bash

docker inspect -f \
       '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' \
       b95de4b12b87

docker run -p 127.0.0.5:80:8080 jeszyman/test

docker run -it --expose 8080 -p 127.0.0.1:8080:8080 jeszyman/test

docker run --rm --name some-nginx jeszyman/test
docker run -it -d -p 180:180 --name test2 jeszyman/test

docker container ls
docker container inspect --format '{{ .NetworkSettings.IPAddress }}' test2
curl 172.17.0.5 -p 180
#+end_src


* Basecamp
- platforms
  - languages
    - C++
      - http://www.seqan.de/
      - https://www.ncbi.nlm.nih.gov/IEB/ToolBox/CPP_DOC/
    - [[id:F9ACCF3D-896B-4FC4-92FD-31A2D6E977DD][R]]
  - data storage and transfer
    - - globus
      - [[https://docs.globus.org/cli/][cli]]
        - [[https://docs.globus.org/cli/reference/][documentation]]
          - https://docs.globus.org/how-to/globus-connect-personal-linux/#globus-connect-personal-cli

- run dockers w/ uname https://github.com/JAremko/docker-emacs
- repo setup
  - bin
    - working scripts
      - check for existing work and bypass 
      - get write protection
    - global-setup.sh
    - local-setup.sh
    - within bin scripts, call local setup paths if they exist
- /$projectdir/
  - /data/
    - /tables/
    - database.csv
    - dictionary.csv
  - $project.org
  - $project.nf
** Docker                                                          :software:
:PROPERTIES:
:ID:       D2FAA88D-70CC-4450-BBB3-8A446CB43AF3
:CREATED:  [2019-07-07 Sun 09:05]
:END:
:LOGBOOK:
CLOCK: [2019-11-30 Sat 18:42]--[2019-11-30 Sat 18:49] =>  0:07
CLOCK: [2019-06-27 Thu 08:31]--[2019-06-27 Thu 08:45] =>  0:14
CLOCK: [2019-05-29 Wed 15:34]--[2019-05-29 Wed 15:44] =>  0:10
CLOCK: [2019-03-22 Fri 17:34]--[2019-03-22 Fri 20:34] =>  3:00
CLOCK: [2017-08-29 Tue 09:38]--[2017-08-29 Tue 09:51] =>  0:13
CLOCK: [2017-08-29 Tue 09:19]--[2017-08-29 Tue 09:37] =>  0:18
:END:
- [ ] setup chown https://stackoverflow.com/questions/26500270/understanding-user-file-ownership-in-docker-how-to-avoid-changing-permissions-o
- https://www.google.com/search?q=docker+cleanup
- documentation examples - https://docs.docker.com/engine/reference/run/#env-environment-variables
- [[id:14a1f321-73c7-4dbb-be33-f7377ae38cdd][Research Infrastructure Services (RIS)]]
- processes
  - install
    - [[https://docs.docker.com/install/linux/docker-ce/ubuntu/#prerequisites][install community edition through ubuntu]], https://docs.docker.com/install/linux/linux-postinstall/
  - build image
    - create Dockerfile
      - [[https://docs.docker.com/engine/reference/builder/#parser-directives][Dockerfile reference]]
      - [[https://docs.docker.com/develop/develop-images/dockerfile_best-practices/][Dockerfile best practices]]
        - [[https://hub.docker.com/search/?q=&type=image&image_filter=official][official images]]
      - [[file:~/data/Dockerfiles/]]
      - recommended dockerfiles
        - [[https://hub.docker.com/_/golang/]]
        - https://hub.docker.com/_/ruby/
        - https://hub.docker.com/_/perl/
        - https://hub.docker.com/_/hylang/
    - pull code into build from github https://stackoverflow.com/questions/52155128/how-write-dockerfile-to-properly-pull-code-from-my-github
    - https://stackoverflow.com/questions/39518377/docker-build-unable-to-fetch-archives
  - push built image to Docker Hub
    - docker login 
    - docker tag <IMAGE ID> jeszyman/<IMAGE NAME>
    - docker push jeszyman/<IMAGE NAME>
    - reference https://ropenscilabs.github.io/r-docker-tutorial/04-Dockerhub.html
    - connect to host 
      - https://dev.to/bufferings/access-host-from-a-docker-container-4099
      - https://medium.com/@mccode/understanding-how-uid-and-gid-work-in-docker-containers-c37a01d01cf
  - run
    - as current user
      - declare user q/ -u <USER NAME>
      - https://www.google.com/search?q=docker+run+set+home+directory
    - w/ symlinks - mount both locations
      - https://www.google.com/search?q=docker+run+volume+symbolic+links
    - https://www.google.com/search?q=docker+run+mount+home+directory
    - in timezone with a wget     tzdata command in the dockerfile, then docker run -e "TZ=America/Chicago" -it jeszyman/dev
    - https://confluence.ris.wustl.edu/display/RSUM/Docker+Wrapper+Environment+Variables
- commands
  |-----------------------------+-----------------------------------|
  | function                    | command                           |
  |-----------------------------+-----------------------------------|
  | <35>                        | <35>                              |
  | build image from Dockerfile | docker image build --file <> .    |
  | list images                 | docker images                     |
  | find from docker hub        | docker search <NAME>              |
  | remove image                | docker rmi <IMAGE>                |
  | push to Docker Hub          | docker push <USER>/<IMAGE NAME>   |
  | get man file                | docker <COMMAND> --help           |
  | list running containers     | docker ps                         |
  | list all containers         | docker ps -a                      |
  | bash shell for container    | exec -it <container-id> bash:     |
  | get dockerfile from image   | docker history --no-trunc <IMAGE> |
  |                             |                                   |
  - stop
    - kill
    - docker commit
      - https://docs.docker.com/engine/reference/commandline/commit/
      - generally don't use for things like adding a new R package- better handled at the dockerfile level
    - run commands
      - -it interactive, terminal CLI
      - -p <host port>:<container port>
        - note that port will be the docker VM port, not host, so won't work directly at a 192 url
          - https://docs.docker.com/docker-for-mac/networking/#use-cases-and-workarounds
          - - https://forums.docker.com/t/using-localhost-for-to-access-running-container/3148/8
      - -d detach- opposite of -it
      - -v mount host directory
      - -rm=true remove container when done
      - e.g. sudo docker run --name=my-r-base --rm -ti rocker/r-base /bin/bash
        - will grab docker image specified from web 
        - --name specifies image name
        - --rm removes container on exit
        - -ti: pseudodotty terminal
- interfaces
  - https://github.com/JAremko/docker-emacs
  - https://github.com/Silex/docker.el
- [[https://docs.docker.com/][documentation]]
  - https://docs.docker.com/engine/faq/
  - https://docs.docker.com/get-started/
    - https://docs.docker.com/get-started/#images-and-containers
  - https://docs.docker.com/develop/develop-images/dockerfile_best-practices/
  - [[https://docs.docker.com/docker-for-mac/][Get started with Docker for Mac]]
  - [[https://docs.docker.com/storage/][storage]]
    - probably best not to use persistant data in containers / images
    - https://www.google.com/search?q=how+to+save+data+in+docker+image
      - https://docs.docker.com/storage/
  - [[https://docs.docker.com/get-started/][Get started]]
  - https://www.reddit.com/r/docker/comments/8s8n3o/heres_a_bunch_of_docker_best_practices_that_i/
  - https://tecadmin.net/tutorial/docker/docker-tutorials/
- applications
  - Docker on [[file:~/Box%20Sync/org/career.org::*McDonnell%20Genome%20Institute%20(MGI)][MGI Cluster]] 
- reference
  - cite:boettiger2015 
  - [[https://stackoverflow.com/questions/23735149/what-is-the-difference-between-a-docker-image-and-a-container][stack: difference b/w image and container]]
  - [[https://hub.docker.com/?ref=login][Docker Hub]]
  - Components
    - docker- is a service daemon
    - Dockerfile: defines image. Docker builds Docker image from Dockerfile
    - image: executable package with everything to run a piece of software
      - runs on any machine with Docker installed
      - prebuilt environments that tell container what to do
    - container: instance of an image, i.e. what image becomes in memory when executed. actually running and doing stuff
    - [[https://hub.docker.com/][docker hub]]
    - dockstore: links docker images with descriptors in common workflow language and/or wdl
      - https://www.youtube.com/watch?v=sInP-ByF9xU
      - https://dockstore.org/
  - Docker does actually use a VM on windows and mac to generate a linux kernal https://benmarwick.github.io/UW-eScience-docker-for-reproducible-research/#7
  - Container projects
    - Rocker
      - http://dirk.eddelbuettel.com/blog/2014/10/23/
      - 
  - [[http://training.play-with-docker.com/alacart/][Docker classroom]]
    - [[http://training.play-with-docker.com/helloworld/][Hello World]]
  - https://github.com/LinuxAtDuke/Intro-To-Docker
  - https://www.google.com/search?q=where+are+docker+images+stored
  - [[https://dev.to/softchris/5-part-docker-series-beginner-to-master-3m1b][5 part Docker series, beginner to master]]
  - [[https://stackoverflow.com/questions/49503061/prompting-for-username-password-with-git-clone-from-dockerfile-run-step][Prompting for username/password with git clone from Dockerfile run step]]
  - https://medium.com/@tonistiigi/build-secrets-and-ssh-forwarding-in-docker-18-09-ae8161d066
  - https://linuxacademy.com/blog/docker/6-years-of-docker-hands-on-docker-training/
  - https://pyvideo.org/pycon-us-2013/the-future-of-linux-containers.html
  - my images
    - jeszyman/dev, local, push to secure docker hub 
  - [[file:~/data/Dockerfiles/][my Dockerfiles]]
  - docker compose
    - https://www.semanticscholar.org/paper/Using-Docker-Compose-for-the-Simple-Deployment-of-List/632c38a859b851b20c3988c773368991151fec33/figure/2
    - https://www.biorxiv.org/content/biorxiv/early/2017/12/26/239947.full.pdf
    - https://www.biostars.org/p/139326/
    - https://www.ncbi.nlm.nih.gov/pmc/articles/PMC6042832/
  - https://www.balena.io/blog/our-dockerfile-tips-tricks/
  - compose
    - https://www.reddit.com/r/docker/comments/cwe2bt/a_handy_dockercompose_commands_and_examples/
- ideas
  - https://stackoverflow.com/questions/54412054/can-you-convert-build-a-docker-image-into-a-full-os-image
  - https://duckduckgo.com/?q=docker+container+daemon&t=canonical&ia=web
  - ideas
    - how to run over wusm vpn?
      - this d/n work https://medium.com/@faithfulanere/solved-docker-build-could-not-resolve-archive-ubuntu-com-apt-get-fails-to-install-anything-9ea4dfdcdcf2
    - auto builds and dockerfile in repo
      - https://docs.docker.com/docker-hub/builds/
      - https://stackoverflow.com/questions/27679740/how-to-add-dockerfile-to-a-docker-registry-page
    - https://www.google.com/search?q=docker+container+retain+command+history
  - consider docker add to add scripts
*** docker containers
#+name: docker_build
#+begin_src bash :tangle no
cd ~/repos/biotools
docker build . --file Dockerfile --tag jeszyman/test
docker build . --file Dockerfile --tag jeszyman/biotools
#+end_src

## identifies server in docker containers
server_ask() {
    echo -n "Choose your server: "
    read SERVER
    SERVER="${SERVER:=chaudhuri-roche}"
}


** Ideas
- dev
  - workflow
    - docker tool build
    - ?dir setup
    - ?tool validation
    - generate test data
    - dev
    - push to params
  - env
    - server
    - cloud
      - github repo
      - dockerhub repo
    - local
      - toolkit repo
        - dockerfile per-tool independent builds, tagged
      - project repo
        - nextflow nfs, parameterized
        - nextflow config
      - tmp- testing output files
** Setup
#+name: setup
#+begin_src bash :tangle no
project=basecamp
repo=~/repos/"${project}"
mkdir -p "${repo}"/src/shell
#+end_src
** [[file:~/repos/basecamp/src/shell/functions.sh][Common Process Functions]]
:PROPERTIES:
:CREATED:  [2020-04-14 Tue 09:05]
:END:
#+name: check_local_software
#+begin_src bash :tangle ./src/bash/functions.sh
check_local_software(){
    if [[ $# -eq 0 ]] ; then
        printf "\n check_local_software 
              \n Checks list of software in array, exits with error message if not found
              \n \$1 = Bash array of software, e.g. software=(bash, git)
              \n "
    else    
        software=$1
        for i in "${software[@]}"; do
            if command -v $i >/dev/null 2>&1 ; then
                echo "$i installed"
            else
                echo "$i not found, exiting"
                exit 1
            fi
        done
    fi
}
#
# check_local_software
# unit test
#softwarecheck=(bash git)
#check_local_software $softwarecheck
#+end_src

#+name: git_pull_all
#+begin_src bash :tangle ./src/git_pull_all.sh :dir ~/repos/basecamp
#!/bin/bash
#########1#########2#########3#########4#########5#########6#########7#########8
#                                                                              #
#                       Script to automate git pulls                           #
#             from a set of repositories within the same root dir              #
#                                                                              #
#########1#########2#########3#########4#########5#########6#########7#########8
# 
# 1. Script Checks
#
## Check if git exist
command -v git >/dev/null 2>&1 # stop if git not found
if [ $? -eq 1 ]; then
    echo "Git not found"
    exit 1; fi
##
## Check if any repos exist
shopt -s nullglob
repo_dirs=(~/repos/*)
if [ ${#repo_dirs[@]} -eq 0 ]; then
    echo "No repos at ~/repos/"
    exit 1; fi
shopt -u nullglob
##
# 2. Pull Function 
#                      
for d in $HOME/repos/*
do 
    [[ ! -d "$d" ]] && continue
    echo "$d" &&
    cd "$d" &&
    git pull &&
    git submodule update --recursive &&
    git submodule update --remote && 
    cd "$OLDPWD"
done
#
#+end_src

#+name: jpg_to_pdf
#+begin_src bash 
#########1#########2#########3#########4#########5#########6#########7#########8#########9#########0#########1
jpg_to_pdf() {
    printf "Function to convert jpeg images to pdf
    Accepts:
    Returns: "
}
#+end_src

#+name:symlink-by-csv-script 
#+begin_src sh :tangle ./src/shell/functions.sh
#
######################
### symlink-by-csv ###
######################
#
# Purpose: generates symbolic links in bulk from a csv file 
#
# Input:
# A .csv file of two columns, 
#  Column 1 with source file paths
#  Column 2 with destination symbolic link paths 
#
# Function:
symlink_by_csv(){
    # Set internal field separator
    export IFS=","
    # Take csv and pass to while/read
    cat $1 | while read a b; do
        ln -s $a $b; done
}
#
# Example:
# cd /tmp
# mkdir -p csv-symlink-test
# cd csv-symlink-test
# touch csv-for-links.csv
# touch file-to-link-from.txt
# echo "file-to-link-from.txt,path-to-link-to.txt" >> csv-for-links.csv
# echo "test link" > file-to-link-from.txt
# export IFS=","
# cat csv-for-links.csv | while read a b; do
#     ln -s $a $b ; done
# cat path-to-link-to.txt
# cd ../
# rm -rf csv-symlink-test
#+end_src

#+name:copy-file-text-to-clipboard 
#+begin_src sh 
#
###################################
### copy-file-text-to-clipboard ###
###################################
#
# Purpose: for pandoc supported file, copies file text to system clipboard
#
# Dependencies:
dependencies=("pandoc" "xclip")
check_dependencies dependencies[@]
#
# Input: 
# Any pandoc supported file 
#
# Function:
text_to_clip() { pandoc -S $1 | xclip -selection clipboard}
#
# Example
cd /tmp/ && rm -rf ./example && mkdir -p ./example && cd ./example 
echo "Hello" | pandoc -o out.docx
chmod 777 ./out.docx
text_to_clip()
./out.docx
test=out.docx
pandoc -S $test | xclip -selection clipboard

#+end_src


** Local Variables                                                 :noexport:
#+property: header-args: results silent
#+property: header-args: cache yes
#+property: header-args: eval never-export
#+property: header-args: exports code
#+property: header-args: session *mpnst*
#+property: header-args: tangle no
#+property: header-args: var: project="mpnst" 
#+startup: overview
# Local Variables:
# truncate-lines: nil
# End:
=======
#+name: build-dockerfile
#+begin_src bash 
#NOTE: Cannot build for local machine while connected to VPN- apt can't install software
cd ~/repos/basecamp
test=~/repos/basecamp

docker build . --file Dockerfile --tag jeszyman/test
#+end_src

#+name: mount-ris-storage
#+begin_src bash 

#+end_src
>>>>>>> fd87b984ab919f4230a3d873ef65c2a1241faaa0
